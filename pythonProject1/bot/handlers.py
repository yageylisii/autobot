from config import dp, bot
from aiogram.filters import Command
from databases import database
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import LabeledPrice
from bot.keyboard import keyboards

class Input(StatesGroup):
    count_star = State()
    count_max_star = State()
    count_max_gift = State()

@dp.message(Command('cancel'))
@dp.message(Command('start'))
@dp.message(Command('menu'))
async def start(message):
    check = await database.insert_data(message.from_user.id, message.from_user.username)
    if check:
        await message.answer('–°–ê–õ–û –ë–†–ê–¢. –≠—Ç–æ –±–æ—Ç-—Å–∫—É–ø—â–∏–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ (–Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π)')
        await message.answer('''
–ü—Ä–æ—Ñ–∏–ª—å:

–ó–≤–µ–∑–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: 0      
        ''', reply_markup = keyboards.star_pay())
    else:
        info_user = await database.select_user(message.from_user.id)

        await message.answer(f'''
–ü—Ä–æ—Ñ–∏–ª—å:

–ó–≤–µ–∑–¥ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ: {info_user.star_count}
Max –∑–≤–µ–∑–¥ –∑–∞ 1 –ø–æ–¥–∞—Ä–æ–∫: {info_user.max_limit}    
Max –∫—É–ø–∏—Ç—Å—è –∑–∞ 1 —Ä–∞–∑: {info_user.star_count}
                ''', reply_markup = keyboards.star_pay())

@dp.callback_query()
async def deposit(data, state):
    info = data.data
    if info == 'deposit':
        text = '–°–∫–æ–ª—å–∫–æ...'
        await state.set_state(Input.count_star)
    elif info == 'replace_maxstar':
        text = '–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –∑–∞ 1 –ø–æ–¥–∞—Ä–æ–∫'
        await state.set_state(Input.count_max_star)
    elif info == 'replace_maxgift':
        await state.set_state(Input.count_max_gift)
        text = '–í–≤–µ–¥–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∞—Ä–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∫—É–ø—è—Ç—Å—è, –≤–≤–µ–¥–∏ 0, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∑–∞–∫—É–ø–∏—Ç—å—Å—è –Ω–∞ –≤—Å—é –∫–æ—Ç–ª–µ—Ç—É'
    await bot.send_message(
        data.from_user.id,
        text = text
    )
    await data.answer()

@dp.message(Input.count_max_star)
async def star_dep(message, state):
    if message.text.isdigit():
        await database.update_user(message.from_user.id, 'max_limit', int(message.text))
        await bot.send_message(message.from_user.id, text='üíô –ò–∑–º–µ–Ω–µ–Ω–æ')
        await state.clear()

@dp.message(Input.count_max_gift)
async def star_dep(message, state):
    if message.text.isdigit():
        await database.update_user(message.from_user.id, 'count_gift', int(message.text))
        await bot.send_message(message.from_user.id, text='üíô –ò–∑–º–µ–Ω–µ–Ω–æ')
        await state.clear()


@dp.message(Input.count_star)
async def star_dep(message, state):
    if message.text.isdigit():
        prices = [LabeledPrice(label="XTR", amount=int(message.text))]
        await bot.send_invoice(
            chat_id = message.from_user.id,
            title = f'üíú –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
            description = '‚≠ê –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∫–Ω–æ–ø–∫–∞ –≤–Ω–∏–∑—É –ø–æ–º–µ–Ω—è—Ç—Å—è –Ω–∞ —á–µ–∫. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ /cancel',
            payload = 'test',
            currency = 'XTR',
            prices = prices,
            start_parameter='vip1'
        )
        await state.clear()

@dp.pre_checkout_query()
async def payment(query):
    info_old = await database.select_user(query.from_user.id)
    await database.update_user(user_id = query.from_user.id, column = 'star_count', value= info_old.star_count + query.total_amount)
    await query.answer(ok=True, text= 'üíô –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω üíú')
    await bot.send_message(query.from_user.id, text = 'üíô –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω üíú')